// simulador.ts
import { Orden } from './orden'; 
import { MaxHeap } from './maxHeap'; 
import { MinHeap } from './minHeap'; 

export class SimuladorMercado {
    private maxHeap: MaxHeap;
    private minHeap: MinHeap;
    private historial: string[] = [];

    constructor() {
        this.maxHeap = new MaxHeap(10); // Mont√≠culo de valores m√°ximos (√≥rdenes de compra)
        this.minHeap = new MinHeap(10); // Mont√≠culo de valores m√≠nimos (√≥rdenes de venta)
    }

    // M√©todo para insertar una orden de compra
    public insertarOrdenCompra(orden: Orden): void {
        this.maxHeap.insert(orden);
    }

    // M√©todo para insertar una orden de venta
    public insertarOrdenVenta(orden: Orden): void {
        this.minHeap.insert(orden);
    }

    // M√©todo que simula la ejecuci√≥n del mercado de acciones
    public ejecutarSimulacion(): void {
        console.log("=".repeat(50));
        console.log("üíº SIMULADOR DE MERCADO DE ACCIONES üíº".padStart(35));
        console.log("=".repeat(50));
        console.log("\nüìä COMPA√ë√çAS DISPONIBLES:\n");
        console.log("  - X\n  - Y\n  - Z\n");

        console.log("\nüõí PROCESANDO √ìRDENES DE COMPRA Y VENTA...\n");
        this.realizarTransacciones();
        
        console.log("\n\nüîç HISTORIAL DE TRANSACCIONES");
        console.log("=".repeat(50));
        this.historial.forEach(transaccion => {
            console.log(transaccion);
        });
        console.log("=".repeat(50));
    }

    // M√©todo para realizar las transacciones entre compra y venta
    private realizarTransacciones(): void {
        // Crear un mapa para agrupar las √≥rdenes por empresa
        const empresasProcesadas = new Set<string>();
        const ordenesPendientes: Orden[] = [];  // Lista para almacenar √≥rdenes no coincidentes
    
        while (!this.maxHeap.isEmpty() && !this.minHeap.isEmpty()) {
            const compra = this.maxHeap.extractMax();
            const venta = this.minHeap.getMin();
    
            // Verificar si ya se proces√≥ una transacci√≥n para esta empresa
            if (empresasProcesadas.has(compra.empresa)) {
                // Si ya se proces√≥ una compra para esta empresa, saltar a la siguiente iteraci√≥n
                continue;
            }
    
            if (compra.empresa === venta.empresa) {
                // Verificar si los precios permiten realizar la transacci√≥n
                if (compra.precio >= venta.precio) {
                    const cantidadTransaccionada = Math.min(compra.cantidad, venta.cantidad);
                    const remanenteCompra = compra.cantidad - cantidadTransaccionada;
                    const remanenteVenta = venta.cantidad - cantidadTransaccionada;
    
                    console.log(`\nüîî Ocurre una transacci√≥n (Compra-Venta):`);
                    console.log(`   ‚úîÔ∏è Empresa: ${compra.empresa}`);
                    console.log(`   üõí Comprador dispuesto a pagar: $${compra.precio}`);
                    console.log(`   üõçÔ∏è Vendedor acepta por: $${venta.precio}`);
                    console.log(`   üîÑ Cantidad de acciones intercambiadas: ${cantidadTransaccionada}`);
                    console.log(`   üíµ Precio de transacci√≥n: $${venta.precio}`);
    
                    const transaccion = `üìÑ Transacci√≥n: ${compra.empresa} | ${cantidadTransaccionada} acciones | Precio: $${venta.precio}`;
                    this.historial.push(transaccion);
    
                    // Manejar remanentes
                    if (remanenteCompra > 0) {
                        this.maxHeap.insert({ ...compra, cantidad: remanenteCompra });
                        console.log(`   ‚û°Ô∏è Cantidad restante para el comprador: ${remanenteCompra}`);
                    }
                    if (remanenteVenta > 0) {
                        this.minHeap.insert({ ...venta, cantidad: remanenteVenta });
                        console.log(`   ‚û°Ô∏è Cantidad restante para el vendedor: ${remanenteVenta}`);
                    }
    
                    console.log(`‚úîÔ∏è Transacci√≥n realizada: ${cantidadTransaccionada} acciones de ${compra.empresa} a $${venta.precio} por acci√≥n.\n`);
    
                    // Marcar la empresa como procesada para evitar m√°s transacciones de la misma compa√±√≠a
                    empresasProcesadas.add(compra.empresa);
    
                } else {
                    console.log(`‚ö†Ô∏è No se pudo realizar la transacci√≥n. Precio de compra insuficiente: ${compra.precio} < ${venta.precio}`);
                    // Guardar la orden de compra para intentar m√°s adelante
                    ordenesPendientes.push(compra);
                }
            } else {
                // Si las empresas no coinciden, almacenar la orden de compra para procesarla m√°s tarde
                ordenesPendientes.push(compra);
            }
        }
    
        // Reinserta las √≥rdenes no procesadas
        ordenesPendientes.forEach(orden => this.maxHeap.insert(orden));
    
        if (!this.maxHeap.isEmpty() || !this.minHeap.isEmpty()) {
            console.log("‚ö†Ô∏è Algunas √≥rdenes no pudieron procesarse en esta ronda.");
        }
    
        console.log("‚úÖ Todas las √≥rdenes procesadas.");
    }
    
    
}
  
